Package postfix;

Helpers
    lettre = [['a' .. 'z'] + ['A' .. 'Z']];
    chiffre = ['0' .. '9'];
    alpha = [lettre + ['_' + '$']];
    alphanum = [lettre + chiffre];

Tokens

    espaces = (' ' | 13 | 10)+;
    commentaire= '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);
    l_accolade='{';
    r_accolade='}';
    l_par = '(';
    r_par = ')';
    non = '!';
    mult = '*';
    div = '/';
    plus = '+';
    minus = '-';


    vrai = 'vrai';
    faux = 'faux';
    equal = '=';
    less = '<';
    et = '&';
    ou = '|';
    mod = '%';

    t_huit = '_';
    saut_de_ligne = '\n';
    point_virgule = ';';
    brackopen  = '[';
    brackclose = ']';
    semicol    = ':';
    virgule = ',';
    retour = 'retour';
    lire = 'lire';
    ecrire = 'ecrire';

    si = 'si';
    sinon = 'sinon';
    alors = 'alors';
    tantque = 'tantque';
    faire = 'faire';
    number = chiffre+;
    entier = 'entier';
    identif = alpha alphanum*;
Ignored Tokens
    espaces,commentaire;

Productions
programme = {programme} listedecvar listedecfonc ;

exp = {ou} exp ou exp1 | {exp1} exp1;
exp1 = {et} exp1 et exp2 | {exp2} exp2;
exp2 = {equal} exp2 equal exp3 | {inf} exp2 less exp3 | {exp3} exp3;
exp3 = {plus} exp3 plus exp4 | {sub} exp3 minus exp4 | {exp4} exp4;
exp4 = {mult} exp4 mult exp5 | {div} exp4 div exp5 | {exp5} exp5;
exp5 = {non} non exp5 | {exp6} exp6;
exp6 = {parentese} l_par exp r_par | {number} number | {vrai} vrai | {faux} faux | {variable} var | {appelfonc} appelfonc
                                                | {lire} lire l_par r_par ;



appelfonc = {appelfonction} identif l_par listeexp r_par ;


instr = {afectation} var equal exp point_virgule |
    {tantque} tantque exp faire instrbloc |
    {fonction} identif l_par listeexp r_par point_virgule|
    {si} si exp alors instrbloc |
    {sinon} si exp alors [thenbranch]:instrbloc sinon [elsebranch]:instrbloc |
    {retour} retour exp point_virgule |
    {ecrire} ecrire l_par exp r_par point_virgule;


instrbloc ={listedinstr} l_accolade listeinstr r_accolade ;
listeinstr = {listdeinstr} instr listeinstr  | {epsilon};
listeexp = {listedeexpression} exp listeexpbis | {epsilon};
listeexpbis = {restelistedeexpression} virgule exp listeexpbis | {epsilon};
var = {identif } identif | {varindexee} identif brackopen exp brackclose ;
decvar = {declarationvar} type identif | {declarationvarindexee} type identif brackopen number brackclose ;
type = {entier} entier | {bool} bool ;
bool = {vrai} vrai | {faux} faux ;
decfonc = {declarationfonction} opttype identif l_par [parametre]:listedecvar r_par [variablefonc]:listedecvar instrbloc  ;
opttype = {type} type | {epsilon};
listedecvar = {listedecvar} decvar listedecvarbis | {epsilon};
listedecvarbis = {apreslistedecvar} virgule decvar listedecvarbis | {epsilon};

listedecfonc = {listedecfonc} decfonc listedecfonc | {epsilon};

