/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import postfix.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgrammeProgramme(AProgrammeProgramme node);
    void caseAOuS(AOuS node);
    void caseAOS(AOS node);
    void caseAEtO(AEtO node);
    void caseAEO(AEO node);
    void caseAEqualE(AEqualE node);
    void caseALessE(ALessE node);
    void caseAPE(APE node);
    void caseAPlusP(APlusP node);
    void caseAMinusP(AMinusP node);
    void caseAMP(AMP node);
    void caseAMiltM(AMiltM node);
    void caseADivM(ADivM node);
    void caseANM(ANM node);
    void caseANonN(ANonN node);
    void caseAFN(AFN node);
    void caseAParenteseF(AParenteseF node);
    void caseANumberF(ANumberF node);
    void caseAVraiF(AVraiF node);
    void caseAFauxF(AFauxF node);
    void caseAVariableF(AVariableF node);
    void caseAAppelfoncF(AAppelfoncF node);
    void caseALireF(ALireF node);
    void caseAAppelfonctionAppelfonc(AAppelfonctionAppelfonc node);
    void caseAListedeexpressionListeexp(AListedeexpressionListeexp node);
    void caseAListeexp(AListeexp node);
    void caseARestelistedeexpressionListeexpbis(ARestelistedeexpressionListeexpbis node);
    void caseAListeexpbis(AListeexpbis node);
    void caseAAfectInstr(AAfectInstr node);
    void caseATantqueInstr(ATantqueInstr node);
    void caseAFoncInstr(AFoncInstr node);
    void caseASiInstr(ASiInstr node);
    void caseASinonInstr(ASinonInstr node);
    void caseARetourInstr(ARetourInstr node);
    void caseAEcrireInstr(AEcrireInstr node);
    void caseAListedinstrInstrbloc(AListedinstrInstrbloc node);
    void caseAThenbranchThenbranch(AThenbranchThenbranch node);
    void caseAElsebranchElsebranch(AElsebranchElsebranch node);
    void caseAListdeinstrListeinstr(AListdeinstrListeinstr node);
    void caseAListeinstr(AListeinstr node);
    void caseAIdentifVar(AIdentifVar node);
    void caseAVarindexeeVar(AVarindexeeVar node);
    void caseADeclarationvarDecvar(ADeclarationvarDecvar node);
    void caseADeclarationvarindexeeDecvar(ADeclarationvarindexeeDecvar node);
    void caseAEntierType(AEntierType node);
    void caseABoolType(ABoolType node);
    void caseAVraiBool(AVraiBool node);
    void caseAFauxBool(AFauxBool node);
    void caseADeclarationfonctionDecfonc(ADeclarationfonctionDecfonc node);
    void caseATypeOpttype(ATypeOpttype node);
    void caseAOpttype(AOpttype node);
    void caseAParametreParametre(AParametreParametre node);
    void caseAListedecvarListedecvar(AListedecvarListedecvar node);
    void caseAListedecvar(AListedecvar node);
    void caseAApreslistedecvarListedecvarbis(AApreslistedecvarListedecvarbis node);
    void caseAListedecvarbis(AListedecvarbis node);
    void caseAListedecfoncListedecfonc(AListedecfoncListedecfonc node);
    void caseAListedecfonc(AListedecfonc node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTLAccolade(TLAccolade node);
    void caseTRAccolade(TRAccolade node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTNon(TNon node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTVrai(TVrai node);
    void caseTFaux(TFaux node);
    void caseTEqual(TEqual node);
    void caseTLess(TLess node);
    void caseTEt(TEt node);
    void caseTOu(TOu node);
    void caseTMod(TMod node);
    void caseTTHuit(TTHuit node);
    void caseTSautDeLigne(TSautDeLigne node);
    void caseTPointVirgule(TPointVirgule node);
    void caseTBrackopen(TBrackopen node);
    void caseTBrackclose(TBrackclose node);
    void caseTSemicol(TSemicol node);
    void caseTVirgule(TVirgule node);
    void caseTRetour(TRetour node);
    void caseTLire(TLire node);
    void caseTEcrire(TEcrire node);
    void caseTSi(TSi node);
    void caseTSinon(TSinon node);
    void caseTAlors(TAlors node);
    void caseTTantque(TTantque node);
    void caseTFaire(TFaire node);
    void caseTNumber(TNumber node);
    void caseTEntier(TEntier node);
    void caseTIdentif(TIdentif node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
