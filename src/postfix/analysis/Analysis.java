/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import postfix.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgrammeProgramme(AProgrammeProgramme node);
    void caseAOuExp(AOuExp node);
    void caseAExp1Exp(AExp1Exp node);
    void caseAEtExp1(AEtExp1 node);
    void caseAExp2Exp1(AExp2Exp1 node);
    void caseAEqualExp2(AEqualExp2 node);
    void caseAInfExp2(AInfExp2 node);
    void caseAExp3Exp2(AExp3Exp2 node);
    void caseAPlusExp3(APlusExp3 node);
    void caseASubExp3(ASubExp3 node);
    void caseAExp4Exp3(AExp4Exp3 node);
    void caseAMultExp4(AMultExp4 node);
    void caseADivExp4(ADivExp4 node);
    void caseAExp5Exp4(AExp5Exp4 node);
    void caseANonExp5(ANonExp5 node);
    void caseAExp6Exp5(AExp6Exp5 node);
    void caseAParenteseExp6(AParenteseExp6 node);
    void caseANumberExp6(ANumberExp6 node);
    void caseAVraiExp6(AVraiExp6 node);
    void caseAFauxExp6(AFauxExp6 node);
    void caseAVariableExp6(AVariableExp6 node);
    void caseAAppelfoncExp6(AAppelfoncExp6 node);
    void caseALireExp6(ALireExp6 node);
    void caseAAppelfonctionAppelfonc(AAppelfonctionAppelfonc node);
    void caseAAfectationInstr(AAfectationInstr node);
    void caseATantqueInstr(ATantqueInstr node);
    void caseAFonctionInstr(AFonctionInstr node);
    void caseASiInstr(ASiInstr node);
    void caseASinonInstr(ASinonInstr node);
    void caseARetourInstr(ARetourInstr node);
    void caseAEcrireInstr(AEcrireInstr node);
    void caseAListedinstrInstrbloc(AListedinstrInstrbloc node);
    void caseAThenbranchThenbranch(AThenbranchThenbranch node);
    void caseAElsebranchElsebranch(AElsebranchElsebranch node);
    void caseAListdeinstrListeinstr(AListdeinstrListeinstr node);
    void caseAEpsilonListeinstr(AEpsilonListeinstr node);
    void caseAListedeexpressionListeexp(AListedeexpressionListeexp node);
    void caseAEpsilonListeexp(AEpsilonListeexp node);
    void caseARestelistedeexpressionListeexpbis(ARestelistedeexpressionListeexpbis node);
    void caseAEpsilonListeexpbis(AEpsilonListeexpbis node);
    void caseAIdentifVar(AIdentifVar node);
    void caseAVarindexeeVar(AVarindexeeVar node);
    void caseADeclarationvarDecvar(ADeclarationvarDecvar node);
    void caseADeclarationvarindexeeDecvar(ADeclarationvarindexeeDecvar node);
    void caseAEntierType(AEntierType node);
    void caseABoolType(ABoolType node);
    void caseAVraiBool(AVraiBool node);
    void caseAFauxBool(AFauxBool node);
    void caseADeclarationfonctionDecfonc(ADeclarationfonctionDecfonc node);
    void caseATypeOpttype(ATypeOpttype node);
    void caseAEpsilonOpttype(AEpsilonOpttype node);
    void caseAParametreParametre(AParametreParametre node);
    void caseAListedecvarListedecvar(AListedecvarListedecvar node);
    void caseAEpsilonListedecvar(AEpsilonListedecvar node);
    void caseAApreslistedecvarListedecvarbis(AApreslistedecvarListedecvarbis node);
    void caseAEpsilonListedecvarbis(AEpsilonListedecvarbis node);
    void caseAListedecfoncListedecfonc(AListedecfoncListedecfonc node);
    void caseAEpsilonListedecfonc(AEpsilonListedecfonc node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTLAccolade(TLAccolade node);
    void caseTRAccolade(TRAccolade node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTNon(TNon node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTVrai(TVrai node);
    void caseTFaux(TFaux node);
    void caseTEqual(TEqual node);
    void caseTLess(TLess node);
    void caseTEt(TEt node);
    void caseTOu(TOu node);
    void caseTMod(TMod node);
    void caseTTHuit(TTHuit node);
    void caseTSautDeLigne(TSautDeLigne node);
    void caseTPointVirgule(TPointVirgule node);
    void caseTBrackopen(TBrackopen node);
    void caseTBrackclose(TBrackclose node);
    void caseTSemicol(TSemicol node);
    void caseTVirgule(TVirgule node);
    void caseTRetour(TRetour node);
    void caseTLire(TLire node);
    void caseTEcrire(TEcrire node);
    void caseTSi(TSi node);
    void caseTSinon(TSinon node);
    void caseTAlors(TAlors node);
    void caseTTantque(TTantque node);
    void caseTFaire(TFaire node);
    void caseTNumber(TNumber node);
    void caseTEntier(TEntier node);
    void caseTIdentif(TIdentif node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
