/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.analysis;

import java.util.*;
import postfix.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuS(AOuS node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOS(AOS node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtO(AEtO node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEO(AEO node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualE(AEqualE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessE(ALessE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPE(APE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusP(APlusP node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusP(AMinusP node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMP(AMP node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMiltM(AMiltM node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivM(ADivM node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANM(ANM node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANonN(ANonN node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFN(AFN node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberF(ANumberF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVraiF(AVraiF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFauxF(AFauxF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVariableF(AVariableF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenteseF(AParenteseF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelfoncF(AAppelfoncF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALireF(ALireF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifVar(AIdentifVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarindexeeVar(AVarindexeeVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelfonctionAppelfonc(AAppelfonctionAppelfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAfectInstr(AAfectInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASiInstr(ASiInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASinonInstr(ASinonInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATantqueInstr(ATantqueInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFoncInstr(AFoncInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetourInstr(ARetourInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEcrireInstr(AEcrireInstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedeexpressionListeexp(AListedeexpressionListeexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilononeListeexp(AEpsilononeListeexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARestelistedeexpressionListeexpbis(ARestelistedeexpressionListeexpbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilontwoListeexpbis(AEpsilontwoListeexpbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThenbranchThenbranch(AThenbranchThenbranch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElsebranchElsebranch(AElsebranchElsebranch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedinstrInstrbloc(AListedinstrInstrbloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListdeinstrListeinstr(AListdeinstrListeinstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonthreeListeinstr(AEpsilonthreeListeinstr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationvarDecvar(ADeclarationvarDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationvarindexeeDecvar(ADeclarationvarindexeeDecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationfonctionDecfonc(ADeclarationfonctionDecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParametreParametre(AParametreParametre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeOpttype(ATypeOpttype node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonfourOpttype(AEpsilonfourOpttype node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedecvarListedecvar(AListedecvarListedecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonfiveListedecvar(AEpsilonfiveListedecvar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAApreslistedecvarListedecvarbis(AApreslistedecvarListedecvarbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonsixListedecvarbis(AEpsilonsixListedecvarbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVraiBool(AVraiBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFauxBool(AFauxBool node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgrammeProgramme(AProgrammeProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedecfoncListedecfonc(AListedecfoncListedecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEpsilonsevenListedecfonc(AEpsilonsevenListedecfonc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVrai(TVrai node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaux(TFaux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEt(TEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNon(TNon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTHuit(TTHuit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSautDeLigne(TSautDeLigne node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPointVirgule(TPointVirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBrackopen(TBrackopen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBrackclose(TBrackclose node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicol(TSemicol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgule(TVirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLAccolade(TLAccolade node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRAccolade(TRAccolade node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLire(TLire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcrire(TEcrire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSi(TSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSinon(TSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlors(TAlors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTantque(TTantque node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaire(TFaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetour(TRetour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEpsilon(TEpsilon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentif(TIdentif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
