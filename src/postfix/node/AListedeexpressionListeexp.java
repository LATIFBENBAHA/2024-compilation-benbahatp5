/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AListedeexpressionListeexp extends PListeexp
{
    private PS _s_;
    private PListeexpbis _listeexpbis_;

    public AListedeexpressionListeexp()
    {
        // Constructor
    }

    public AListedeexpressionListeexp(
        @SuppressWarnings("hiding") PS _s_,
        @SuppressWarnings("hiding") PListeexpbis _listeexpbis_)
    {
        // Constructor
        setS(_s_);

        setListeexpbis(_listeexpbis_);

    }

    @Override
    public Object clone()
    {
        return new AListedeexpressionListeexp(
            cloneNode(this._s_),
            cloneNode(this._listeexpbis_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListedeexpressionListeexp(this);
    }

    public PS getS()
    {
        return this._s_;
    }

    public void setS(PS node)
    {
        if(this._s_ != null)
        {
            this._s_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._s_ = node;
    }

    public PListeexpbis getListeexpbis()
    {
        return this._listeexpbis_;
    }

    public void setListeexpbis(PListeexpbis node)
    {
        if(this._listeexpbis_ != null)
        {
            this._listeexpbis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listeexpbis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._s_)
            + toString(this._listeexpbis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._s_ == child)
        {
            this._s_ = null;
            return;
        }

        if(this._listeexpbis_ == child)
        {
            this._listeexpbis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._s_ == oldChild)
        {
            setS((PS) newChild);
            return;
        }

        if(this._listeexpbis_ == oldChild)
        {
            setListeexpbis((PListeexpbis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
