/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.node;

import postfix.analysis.*;

@SuppressWarnings("nls")
public final class AMiltM extends PM
{
    private PM _m_;
    private TMult _mult_;
    private PN _n_;

    public AMiltM()
    {
        // Constructor
    }

    public AMiltM(
        @SuppressWarnings("hiding") PM _m_,
        @SuppressWarnings("hiding") TMult _mult_,
        @SuppressWarnings("hiding") PN _n_)
    {
        // Constructor
        setM(_m_);

        setMult(_mult_);

        setN(_n_);

    }

    @Override
    public Object clone()
    {
        return new AMiltM(
            cloneNode(this._m_),
            cloneNode(this._mult_),
            cloneNode(this._n_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMiltM(this);
    }

    public PM getM()
    {
        return this._m_;
    }

    public void setM(PM node)
    {
        if(this._m_ != null)
        {
            this._m_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._m_ = node;
    }

    public TMult getMult()
    {
        return this._mult_;
    }

    public void setMult(TMult node)
    {
        if(this._mult_ != null)
        {
            this._mult_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mult_ = node;
    }

    public PN getN()
    {
        return this._n_;
    }

    public void setN(PN node)
    {
        if(this._n_ != null)
        {
            this._n_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._n_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._m_)
            + toString(this._mult_)
            + toString(this._n_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._m_ == child)
        {
            this._m_ = null;
            return;
        }

        if(this._mult_ == child)
        {
            this._mult_ = null;
            return;
        }

        if(this._n_ == child)
        {
            this._n_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._m_ == oldChild)
        {
            setM((PM) newChild);
            return;
        }

        if(this._mult_ == oldChild)
        {
            setMult((TMult) newChild);
            return;
        }

        if(this._n_ == oldChild)
        {
            setN((PN) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
