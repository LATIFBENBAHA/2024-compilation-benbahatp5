/* This file was generated by SableCC (http://www.sablecc.org/). */

package postfix.parser;

import postfix.lexer.*;
import postfix.node.*;
import postfix.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PS node1 = (PS) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AOuS */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AOS */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AEtO */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AEO */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AEqualE */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce ALessE */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce APE */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce APlusP */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AMinusP */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce AMP */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list, false);
            }
            break;
            case 10: /* reduce AMiltM */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce ADivM */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list, false);
            }
            break;
            case 12: /* reduce ANM */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list, false);
            }
            break;
            case 13: /* reduce ANonN */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list, false);
            }
            break;
            case 14: /* reduce AFN */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list, false);
            }
            break;
            case 15: /* reduce ANumberF */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list, false);
            }
            break;
            case 16: /* reduce AVraiF */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list, false);
            }
            break;
            case 17: /* reduce AFauxF */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AVariableF */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AParenteseF */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce AAppelfoncF */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list, false);
            }
            break;
            case 21: /* reduce ALireF */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list, false);
            }
            break;
            case 22: /* reduce AIdentifVar */
            {
                ArrayList<Object> list = new22();
                push(goTo(7), list, false);
            }
            break;
            case 23: /* reduce AVarindexeeVar */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list, false);
            }
            break;
            case 24: /* reduce AAppelfonctionAppelfonc */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list, false);
            }
            break;
            case 25: /* reduce AAfectInstr */
            {
                ArrayList<Object> list = new25();
                push(goTo(9), list, false);
            }
            break;
            case 26: /* reduce ASiInstr */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list, false);
            }
            break;
            case 27: /* reduce ASinonInstr */
            {
                ArrayList<Object> list = new27();
                push(goTo(9), list, false);
            }
            break;
            case 28: /* reduce ATantqueInstr */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list, false);
            }
            break;
            case 29: /* reduce AFoncInstr */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list, false);
            }
            break;
            case 30: /* reduce ARetourInstr */
            {
                ArrayList<Object> list = new30();
                push(goTo(9), list, false);
            }
            break;
            case 31: /* reduce AEcrireInstr */
            {
                ArrayList<Object> list = new31();
                push(goTo(9), list, false);
            }
            break;
            case 32: /* reduce AListedeexpressionListeexp */
            {
                ArrayList<Object> list = new32();
                push(goTo(10), list, false);
            }
            break;
            case 33: /* reduce AEpsilononeListeexp */
            {
                ArrayList<Object> list = new33();
                push(goTo(10), list, false);
            }
            break;
            case 34: /* reduce ARestelistedeexpressionListeexpbis */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list, false);
            }
            break;
            case 35: /* reduce AEpsilontwoListeexpbis */
            {
                ArrayList<Object> list = new35();
                push(goTo(11), list, false);
            }
            break;
            case 36: /* reduce AThenbranchThenbranch */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce AElsebranchElsebranch */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list, false);
            }
            break;
            case 38: /* reduce AListedinstrInstrbloc */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list, false);
            }
            break;
            case 39: /* reduce AListdeinstrListeinstr */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list, false);
            }
            break;
            case 40: /* reduce AEpsilonthreeListeinstr */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list, false);
            }
            break;
            case 41: /* reduce ADeclarationvarDecvar */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce ADeclarationvarindexeeDecvar */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list, false);
            }
            break;
            case 43: /* reduce AEntierType */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce ABoolType */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce ADeclarationfonctionDecfonc */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list, false);
            }
            break;
            case 46: /* reduce AParametreParametre */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list, false);
            }
            break;
            case 47: /* reduce ATypeOpttype */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list, false);
            }
            break;
            case 48: /* reduce AEpsilonfourOpttype */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list, false);
            }
            break;
            case 49: /* reduce AListedecvarListedecvar */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list, false);
            }
            break;
            case 50: /* reduce AEpsilonfiveListedecvar */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list, false);
            }
            break;
            case 51: /* reduce AApreslistedecvarListedecvarbis */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list, false);
            }
            break;
            case 52: /* reduce AEpsilonsixListedecvarbis */
            {
                ArrayList<Object> list = new52();
                push(goTo(22), list, false);
            }
            break;
            case 53: /* reduce AVraiBool */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list, false);
            }
            break;
            case 54: /* reduce AFauxBool */
            {
                ArrayList<Object> list = new54();
                push(goTo(23), list, false);
            }
            break;
            case 55: /* reduce AProgrammeProgramme */
            {
                ArrayList<Object> list = new55();
                push(goTo(24), list, false);
            }
            break;
            case 56: /* reduce AListedecfoncListedecfonc */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list, false);
            }
            break;
            case 57: /* reduce AEpsilonsevenListedecfonc */
            {
                ArrayList<Object> list = new57();
                push(goTo(25), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AOuS */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        PS psNode2;
        TOu touNode3;
        PO poNode4;
        psNode2 = (PS)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        poNode4 = (PO)nodeArrayList3.get(0);

        psNode1 = new AOuS(psNode2, touNode3, poNode4);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AOS */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PS psNode1;
        {
            // Block
        PO poNode2;
        poNode2 = (PO)nodeArrayList1.get(0);

        psNode1 = new AOS(poNode2);
        }
	nodeList.add(psNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEtO */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PO poNode1;
        {
            // Block
        PO poNode2;
        TEt tetNode3;
        PE peNode4;
        poNode2 = (PO)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);

        poNode1 = new AEtO(poNode2, tetNode3, peNode4);
        }
	nodeList.add(poNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AEO */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PO poNode1;
        {
            // Block
        PE peNode2;
        peNode2 = (PE)nodeArrayList1.get(0);

        poNode1 = new AEO(peNode2);
        }
	nodeList.add(poNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AEqualE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PP ppNode2;
        TEqual tequalNode3;
        PE peNode4;
        ppNode2 = (PP)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);

        peNode1 = new AEqualE(ppNode2, tequalNode3, peNode4);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ALessE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PP ppNode2;
        TLess tlessNode3;
        PE peNode4;
        ppNode2 = (PP)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        peNode4 = (PE)nodeArrayList3.get(0);

        peNode1 = new ALessE(ppNode2, tlessNode3, peNode4);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce APE */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE peNode1;
        {
            // Block
        PP ppNode2;
        ppNode2 = (PP)nodeArrayList1.get(0);

        peNode1 = new APE(ppNode2);
        }
	nodeList.add(peNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce APlusP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PP ppNode2;
        TPlus tplusNode3;
        PM pmNode4;
        ppNode2 = (PP)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pmNode4 = (PM)nodeArrayList3.get(0);

        ppNode1 = new APlusP(ppNode2, tplusNode3, pmNode4);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMinusP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PP ppNode2;
        TMinus tminusNode3;
        PM pmNode4;
        ppNode2 = (PP)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pmNode4 = (PM)nodeArrayList3.get(0);

        ppNode1 = new AMinusP(ppNode2, tminusNode3, pmNode4);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AMP */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PP ppNode1;
        {
            // Block
        PM pmNode2;
        pmNode2 = (PM)nodeArrayList1.get(0);

        ppNode1 = new AMP(pmNode2);
        }
	nodeList.add(ppNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMiltM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PM pmNode1;
        {
            // Block
        PN pnNode2;
        TMult tmultNode3;
        PM pmNode4;
        pnNode2 = (PN)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pmNode4 = (PM)nodeArrayList3.get(0);

        pmNode1 = new AMiltM(pnNode2, tmultNode3, pmNode4);
        }
	nodeList.add(pmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ADivM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PM pmNode1;
        {
            // Block
        PN pnNode2;
        TDiv tdivNode3;
        PM pmNode4;
        pnNode2 = (PN)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pmNode4 = (PM)nodeArrayList3.get(0);

        pmNode1 = new ADivM(pnNode2, tdivNode3, pmNode4);
        }
	nodeList.add(pmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANM */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PM pmNode1;
        {
            // Block
        PN pnNode2;
        pnNode2 = (PN)nodeArrayList1.get(0);

        pmNode1 = new ANM(pnNode2);
        }
	nodeList.add(pmNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ANonN */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PN pnNode1;
        {
            // Block
        TNon tnonNode2;
        PF pfNode3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pfNode3 = (PF)nodeArrayList2.get(0);

        pnNode1 = new ANonN(tnonNode2, pfNode3);
        }
	nodeList.add(pnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AFN */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PN pnNode1;
        {
            // Block
        PF pfNode2;
        pfNode2 = (PF)nodeArrayList1.get(0);

        pnNode1 = new AFN(pfNode2);
        }
	nodeList.add(pnNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ANumberF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pfNode1 = new ANumberF(tnumberNode2);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVraiF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pfNode1 = new AVraiF(tvraiNode2);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AFauxF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pfNode1 = new AFauxF(tfauxNode2);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVariableF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pfNode1 = new AVariableF(pvarNode2);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AParenteseF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TLPar tlparNode2;
        PS psNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfNode1 = new AParenteseF(tlparNode2, psNode3, trparNode4);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAppelfoncF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        PAppelfonc pappelfoncNode2;
        pappelfoncNode2 = (PAppelfonc)nodeArrayList1.get(0);

        pfNode1 = new AAppelfoncF(pappelfoncNode2);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ALireF */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PF pfNode1;
        {
            // Block
        TLire tlireNode2;
        TLPar tlparNode3;
        TRPar trparNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        pfNode1 = new ALireF(tlireNode2, tlparNode3, trparNode4);
        }
	nodeList.add(pfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIdentifVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pvarNode1 = new AIdentifVar(tidentifNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AVarindexeeVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TBrackopen tbrackopenNode3;
        PS psNode4;
        TBrackclose tbrackcloseNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tbrackopenNode3 = (TBrackopen)nodeArrayList2.get(0);
        psNode4 = (PS)nodeArrayList3.get(0);
        tbrackcloseNode5 = (TBrackclose)nodeArrayList4.get(0);

        pvarNode1 = new AVarindexeeVar(tidentifNode2, tbrackopenNode3, psNode4, tbrackcloseNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAppelfonctionAppelfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppelfonc pappelfoncNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLPar tlparNode3;
        PListeexp plisteexpNode4;
        TRPar trparNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plisteexpNode4 = (PListeexp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pappelfoncNode1 = new AAppelfonctionAppelfonc(tidentifNode2, tlparNode3, plisteexpNode4, trparNode5);
        }
	nodeList.add(pappelfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAfectInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PVar pvarNode2;
        TEqual tequalNode3;
        PS psNode4;
        TPointVirgule tpointvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        psNode4 = (PS)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointVirgule)nodeArrayList4.get(0);

        pinstrNode1 = new AAfectInstr(pvarNode2, tequalNode3, psNode4, tpointvirguleNode5);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASiInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TSi tsiNode2;
        PS psNode3;
        TAlors talorsNode4;
        PInstrbloc pinstrblocNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pinstrblocNode5 = (PInstrbloc)nodeArrayList4.get(0);

        pinstrNode1 = new ASiInstr(tsiNode2, psNode3, talorsNode4, pinstrblocNode5);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ASinonInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TSi tsiNode2;
        PS psNode3;
        TAlors talorsNode4;
        PThenbranch pthenbranchNode5;
        TSinon tsinonNode6;
        PElsebranch pelsebranchNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pthenbranchNode5 = (PThenbranch)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        pelsebranchNode7 = (PElsebranch)nodeArrayList6.get(0);

        pinstrNode1 = new ASinonInstr(tsiNode2, psNode3, talorsNode4, pthenbranchNode5, tsinonNode6, pelsebranchNode7);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ATantqueInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PS psNode3;
        TFaire tfaireNode4;
        PInstrbloc pinstrblocNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pinstrblocNode5 = (PInstrbloc)nodeArrayList4.get(0);

        pinstrNode1 = new ATantqueInstr(ttantqueNode2, psNode3, tfaireNode4, pinstrblocNode5);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AFoncInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TLPar tlparNode3;
        PListeexp plisteexpNode4;
        TRPar trparNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        plisteexpNode4 = (PListeexp)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pinstrNode1 = new AFoncInstr(tidentifNode2, tlparNode3, plisteexpNode4, trparNode5);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ARetourInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TRetour tretourNode2;
        PS psNode3;
        TPointVirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        psNode3 = (PS)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointVirgule)nodeArrayList3.get(0);

        pinstrNode1 = new ARetourInstr(tretourNode2, psNode3, tpointvirguleNode4);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEcrireInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TLPar tlparNode3;
        PS psNode4;
        TRPar trparNode5;
        TPointVirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        psNode4 = (PS)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointVirgule)nodeArrayList5.get(0);

        pinstrNode1 = new AEcrireInstr(tecrireNode2, tlparNode3, psNode4, trparNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AListedeexpressionListeexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexp plisteexpNode1;
        {
            // Block
        PS psNode2;
        PListeexpbis plisteexpbisNode3;
        psNode2 = (PS)nodeArrayList1.get(0);
        plisteexpbisNode3 = (PListeexpbis)nodeArrayList2.get(0);

        plisteexpNode1 = new AListedeexpressionListeexp(psNode2, plisteexpbisNode3);
        }
	nodeList.add(plisteexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEpsilononeListeexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexp plisteexpNode1;
        {
            // Block
        TEpsilon tepsilonNode2;
        tepsilonNode2 = (TEpsilon)nodeArrayList1.get(0);

        plisteexpNode1 = new AEpsilononeListeexp(tepsilonNode2);
        }
	nodeList.add(plisteexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ARestelistedeexpressionListeexpbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexpbis plisteexpbisNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PListeexpbis plisteexpbisNode3;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        plisteexpbisNode3 = (PListeexpbis)nodeArrayList2.get(0);

        plisteexpbisNode1 = new ARestelistedeexpressionListeexpbis(tvirguleNode2, plisteexpbisNode3);
        }
	nodeList.add(plisteexpbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AEpsilontwoListeexpbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexpbis plisteexpbisNode1;
        {
            // Block
        TEpsilon tepsilonNode2;
        tepsilonNode2 = (TEpsilon)nodeArrayList1.get(0);

        plisteexpbisNode1 = new AEpsilontwoListeexpbis(tepsilonNode2);
        }
	nodeList.add(plisteexpbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AThenbranchThenbranch */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PThenbranch pthenbranchNode1;
        {
            // Block
        PInstrbloc pinstrblocNode2;
        pinstrblocNode2 = (PInstrbloc)nodeArrayList1.get(0);

        pthenbranchNode1 = new AThenbranchThenbranch(pinstrblocNode2);
        }
	nodeList.add(pthenbranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AElsebranchElsebranch */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsebranch pelsebranchNode1;
        {
            // Block
        PInstrbloc pinstrblocNode2;
        pinstrblocNode2 = (PInstrbloc)nodeArrayList1.get(0);

        pelsebranchNode1 = new AElsebranchElsebranch(pinstrblocNode2);
        }
	nodeList.add(pelsebranchNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AListedinstrInstrbloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrbloc pinstrblocNode1;
        {
            // Block
        TLAccolade tlaccoladeNode2;
        PListeinstr plisteinstrNode3;
        TRAccolade traccoladeNode4;
        tlaccoladeNode2 = (TLAccolade)nodeArrayList1.get(0);
        plisteinstrNode3 = (PListeinstr)nodeArrayList2.get(0);
        traccoladeNode4 = (TRAccolade)nodeArrayList3.get(0);

        pinstrblocNode1 = new AListedinstrInstrbloc(tlaccoladeNode2, plisteinstrNode3, traccoladeNode4);
        }
	nodeList.add(pinstrblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AListdeinstrListeinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeinstr plisteinstrNode1;
        {
            // Block
        PInstr pinstrNode2;
        PListeinstr plisteinstrNode3;
        pinstrNode2 = (PInstr)nodeArrayList1.get(0);
        plisteinstrNode3 = (PListeinstr)nodeArrayList2.get(0);

        plisteinstrNode1 = new AListdeinstrListeinstr(pinstrNode2, plisteinstrNode3);
        }
	nodeList.add(plisteinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AEpsilonthreeListeinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeinstr plisteinstrNode1;
        {
            // Block
        TEpsilon tepsilonNode2;
        tepsilonNode2 = (TEpsilon)nodeArrayList1.get(0);

        plisteinstrNode1 = new AEpsilonthreeListeinstr(tepsilonNode2);
        }
	nodeList.add(plisteinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADeclarationvarDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pdecvarNode1 = new ADeclarationvarDecvar(ptypeNode2, tidentifNode3);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ADeclarationvarindexeeDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentif tidentifNode3;
        TBrackopen tbrackopenNode4;
        TNumber tnumberNode5;
        TBrackclose tbrackcloseNode6;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tbrackopenNode4 = (TBrackopen)nodeArrayList3.get(0);
        tnumberNode5 = (TNumber)nodeArrayList4.get(0);
        tbrackcloseNode6 = (TBrackclose)nodeArrayList5.get(0);

        pdecvarNode1 = new ADeclarationvarindexeeDecvar(ptypeNode2, tidentifNode3, tbrackopenNode4, tnumberNode5, tbrackcloseNode6);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        PBool pboolNode2;
        pboolNode2 = (PBool)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(pboolNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADeclarationfonctionDecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecfonc pdecfoncNode1;
        {
            // Block
        POpttype popttypeNode2;
        TIdentif tidentifNode3;
        TLPar tlparNode4;
        PParametre pparametreNode5;
        TRPar trparNode6;
        PListedecvar plistedecvarNode7;
        PInstrbloc pinstrblocNode8;
        popttypeNode2 = (POpttype)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pparametreNode5 = (PParametre)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        plistedecvarNode7 = (PListedecvar)nodeArrayList6.get(0);
        pinstrblocNode8 = (PInstrbloc)nodeArrayList7.get(0);

        pdecfoncNode1 = new ADeclarationfonctionDecfonc(popttypeNode2, tidentifNode3, tlparNode4, pparametreNode5, trparNode6, plistedecvarNode7, pinstrblocNode8);
        }
	nodeList.add(pdecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AParametreParametre */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParametre pparametreNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        plistedecvarNode2 = (PListedecvar)nodeArrayList1.get(0);

        pparametreNode1 = new AParametreParametre(plistedecvarNode2);
        }
	nodeList.add(pparametreNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ATypeOpttype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpttype popttypeNode1;
        {
            // Block
        PType ptypeNode2;
        ptypeNode2 = (PType)nodeArrayList1.get(0);

        popttypeNode1 = new ATypeOpttype(ptypeNode2);
        }
	nodeList.add(popttypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AEpsilonfourOpttype */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpttype popttypeNode1;
        {
            // Block
        TEpsilon tepsilonNode2;
        tepsilonNode2 = (TEpsilon)nodeArrayList1.get(0);

        popttypeNode1 = new AEpsilonfourOpttype(tepsilonNode2);
        }
	nodeList.add(popttypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AListedecvarListedecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvar plistedecvarNode1;
        {
            // Block
        PDecvar pdecvarNode2;
        PListedecvarbis plistedecvarbisNode3;
        pdecvarNode2 = (PDecvar)nodeArrayList1.get(0);
        plistedecvarbisNode3 = (PListedecvarbis)nodeArrayList2.get(0);

        plistedecvarNode1 = new AListedecvarListedecvar(pdecvarNode2, plistedecvarbisNode3);
        }
	nodeList.add(plistedecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AEpsilonfiveListedecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvar plistedecvarNode1;
        {
            // Block
        TEpsilon tepsilonNode2;
        tepsilonNode2 = (TEpsilon)nodeArrayList1.get(0);

        plistedecvarNode1 = new AEpsilonfiveListedecvar(tepsilonNode2);
        }
	nodeList.add(plistedecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AApreslistedecvarListedecvarbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvarbis plistedecvarbisNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDecvar pdecvarNode3;
        PListedecvarbis plistedecvarbisNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdecvarNode3 = (PDecvar)nodeArrayList2.get(0);
        plistedecvarbisNode4 = (PListedecvarbis)nodeArrayList3.get(0);

        plistedecvarbisNode1 = new AApreslistedecvarListedecvarbis(tvirguleNode2, pdecvarNode3, plistedecvarbisNode4);
        }
	nodeList.add(plistedecvarbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AEpsilonsixListedecvarbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecvarbis plistedecvarbisNode1;
        {
            // Block
        TEpsilon tepsilonNode2;
        tepsilonNode2 = (TEpsilon)nodeArrayList1.get(0);

        plistedecvarbisNode1 = new AEpsilonsixListedecvarbis(tepsilonNode2);
        }
	nodeList.add(plistedecvarbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AVraiBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBool pboolNode1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pboolNode1 = new AVraiBool(tvraiNode2);
        }
	nodeList.add(pboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AFauxBool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBool pboolNode1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pboolNode1 = new AFauxBool(tfauxNode2);
        }
	nodeList.add(pboolNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AProgrammeProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PListedecvar plistedecvarNode2;
        PListedecfonc plistedecfoncNode3;
        plistedecvarNode2 = (PListedecvar)nodeArrayList1.get(0);
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgrammeProgramme(plistedecvarNode2, plistedecfoncNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AListedecfoncListedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecfonc plistedecfoncNode1;
        {
            // Block
        PDecfonc pdecfoncNode2;
        PListedecfonc plistedecfoncNode3;
        pdecfoncNode2 = (PDecfonc)nodeArrayList1.get(0);
        plistedecfoncNode3 = (PListedecfonc)nodeArrayList2.get(0);

        plistedecfoncNode1 = new AListedecfoncListedecfonc(pdecfoncNode2, plistedecfoncNode3);
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AEpsilonsevenListedecfonc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListedecfonc plistedecfoncNode1;
        {
            // Block
        TEpsilon tepsilonNode2;
        tepsilonNode2 = (TEpsilon)nodeArrayList1.get(0);

        plistedecfoncNode1 = new AEpsilonsevenListedecfonc(tepsilonNode2);
        }
	nodeList.add(plistedecfoncNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 4}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 5}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 6}, {10, SHIFT, 19}, },
			{{-1, REDUCE, 22}, {10, SHIFT, 20}, {18, SHIFT, 21}, },
			{{-1, ERROR, 8}, {5, SHIFT, 22}, {35, ACCEPT, -1}, },
			{{-1, REDUCE, 1}, {6, SHIFT, 23}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 6}, {3, SHIFT, 24}, {4, SHIFT, 25}, {13, SHIFT, 26}, {14, SHIFT, 27}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 12}, {7, SHIFT, 28}, {8, SHIFT, 29}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 17}, {5, SHIFT, 22}, {11, SHIFT, 30}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 19}, {11, SHIFT, 31}, },
			{{-1, ERROR, 20}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {32, SHIFT, 32}, {34, SHIFT, 7}, },
			{{-1, ERROR, 21}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 22}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 23}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 24}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 25}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 26}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 27}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 28}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, ERROR, 29}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {10, SHIFT, 4}, {12, SHIFT, 5}, {24, SHIFT, 6}, {34, SHIFT, 7}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 33}, {5, SHIFT, 22}, {21, SHIFT, 44}, {32, SHIFT, 45}, },
			{{-1, ERROR, 34}, {11, SHIFT, 47}, },
			{{-1, ERROR, 35}, {5, SHIFT, 22}, {19, SHIFT, 48}, },
			{{-1, REDUCE, 0}, {6, SHIFT, 23}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 44}, {21, SHIFT, 44}, {32, SHIFT, 45}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 34}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 8}, {4, 17}, {20, 33}, {21, 35}, },
			{{-1, 9}, {22, 36}, },
			{{-1, 10}, {23, 37}, {26, 40}, {27, 41}, },
			{{-1, 11}, },
			{{-1, 12}, {24, 38}, {25, 39}, {28, 42}, {29, 43}, },
			{{-1, 13}, },
			{{-1, 14}, {5, 18}, },
			{{-1, 15}, },
			{{-1, 16}, },
			{{-1, -1}, },
			{{-1, 34}, },
			{{-1, 46}, {44, 49}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: number, 'vrai', 'faux', '(', '!', 'lire', identif",
			"expecting: '+', '-', '|', '&', '*', '/', ')', '=', '<', ']', ',', 'epsilon', EOF",
			"expecting: number, 'vrai', 'faux', '(', 'lire', identif",
			"expecting: '('",
			"expecting: '+', '-', '|', '&', '*', '/', '(', ')', '=', '<', '[', ']', ',', 'epsilon', EOF",
			"expecting: '|', EOF",
			"expecting: '|', '&', ')', ']', ',', 'epsilon', EOF",
			"expecting: '+', '-', '|', '&', ')', '=', '<', ']', ',', 'epsilon', EOF",
			"expecting: '|', ')'",
			"expecting: ')'",
			"expecting: number, 'vrai', 'faux', '(', '!', 'lire', 'epsilon', identif",
			"expecting: '|', ',', 'epsilon'",
			"expecting: '|', ']'",
			"expecting: ',', 'epsilon'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 0, 2, 3, 4, 5, 6, 6, 7, 7, 1, 1, 1, 1, 8, 1, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 9, 11, 9, 12, 6, 6, 7, 7, 6, 6, 7, 7, 13, 9, 9, 1, 1, 9, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
